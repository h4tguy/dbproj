Database Implementation
(PSQL below)

Summary:
--------

Relations:

Users (Regnum, FullName, Salt, HashedPassword, UserType)
Questions (Qno, Question, RightAnswer, SetBy, Useless)
MCQAns (Qno, Letter, Answer)
Answers (Regnum, Qno, Answer)
Ratings (Qno, Regnum, Points, Reason)

Useful Derived Relations (will be kept permeneantly despite violating normalisation):

QuestionDifficulty (Qno, Difficulty)
Results (Regnum, FullName, TotalAnswers, CorrectAnswers, TotalQuestions, AverageRating)



Necessary:
----------

Users (Regnum, Salt, HashedPassword, UserType):
	List of all users and details. Regnum is the user's unique identifier, salt is used as a security measure when 
	hashing, the password stored has been hashed, and the UserType determines what privileges the user has 
	(Student or Teacher). FullName is necessary for when reporting students' results.

Questions:
	All Questions, MCQ or one-word answer, are stored in Questions (Qno, Question, RightAnswer, SetBy, Useless). In
	addition, the answers to all the MCQs are stored in MCQAns (Qno, Letter, Answer), where Letter will in general 
	be one of 'A','B','C' or 'D' but any MCQ is not restricted to having exactly 4 answers.

Answers (Regnum, Qno, Answer):
	A table for Answers that records who answered which question with what answer - assumes that no one may answer 
	the same question twice

Ratings (Qno, Regnum, Points, Reason):
	A table to store how questions were rated by people. There should be a score from 1 to 5 (points) as well as a 
	reason for the rating given. The rater?s Regnum is also stored ? should be able to safely assume no one rates 
	the same question twice.



Derived Relations that will be needed for queries:
--------------------------------------------------

Results (Regnum, FullName, TotalAnswers, CorrectAnswers, TotalQuestions, AverageRating):
	As this table is derived from the answers and ratings tables, it isn't necessary. We do need to be able to make 
	a class list showing results, however, so it would be useful at least as a temporary construct.

QuestionDifficulty (Qno, Difficulty):
	Another derived table where the difficulty of a question is some function of the proportion of people who got 
	it correct and how it was rated. Difficulty can be any of {Easy, Average, Hard, Unusable}. We need to be able 
	to generate a report of every question in the database along with its difficulty. We also need to be able to 
	make a test of questions with varying difficulty.


PSQL to create the tables:
--------------------------

CREATE TABLE Users (
	Regnum VARCHAR(9) PRIMARY KEY,
	FullName VARCHAR(50) NOT NULL,
	Salt VARCHAR (20) NOT NULL,
	HashedPassword VARCHAR(40),
	UserType VARCHAR(7) NOT NULL CONSTRAINT ValidUserType CHECK (UserType IN ('student','teacher'))
);

CREATE TABLE Questions (
	Qno INTEGER PRIMARY KEY,
	Question VARCHAR(100) NOT NULL,
	RightAnswer VARCHAR(20) NOT NULL,
	SetBy VARCHAR(9) NOT NULL REFERENCES Users (Regnum),
	Useless BOOLEAN
);

CREATE TABLE MCQans (
	Qno INTEGER REFERENCES Questions (Qno),
	Letter VARCHAR(1) NOT NULL CONSTRAINT ValidLetter CHECK (Letter IN ('A','B','C','D')),
	Answer VARCHAR(20) NOT NULL,
	
	PRIMARY KEY( Qno, Letter )
);

CREATE TABLE Answers (
	Regnum VARCHAR(9) REFERENCES Users (Regnum),
	Qno INTEGER REFERENCES Questions (Qno),
	Answer VARCHAR(20),

	PRIMARY KEY( Regnum, Qno )
);

CREATE TABLE Ratings (
	Qno INTEGER REFERENCES Questions (Qno),
	Regnum VARCHAR(9) REFERENCES Users (Regnum),
	Points INTEGER CONSTRAINT ValidPoints CHECK (Points >=1 AND Points <=5),
	Reason VARCHAR(50),

	PRIMARY KEY( Qno, Regnum )
);

CREATE TABLE QuestionDifficulty (
	Qno INTEGER PRIMARY KEY REFERENCES Questions (Qno),
	Difficulty VARCHAR(8)
);


CREATE TABLE Results (
	Regnum VARCHAR(9) REFERENCES Users (Regnum),
	FullName VARCHAR(50),
	TotalAnswers INTEGER,
	CorrectAnswers INTEGER,
	TotalQuestions INTEGER,
	AverageRating REAL,

	PRIMARY KEY (Regnum)
);
